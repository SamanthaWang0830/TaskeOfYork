{"ast":null,"code":"import * as EmailValidator from 'email-validator';\nconst hasSpecialChar = str => {\n  return /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(str);\n};\nconst hasNumber = str => {\n  return /\\d/.test(str);\n};\nconst hasLowerCase = str => {\n  return str.toUpperCase() !== str;\n};\nconst hasUpperCase = str => {\n  return str.toLowerCase() !== str;\n};\nconst validatePassword = text => {\n  if (text.length < 8) return \"Password should be 8 or more characters\";\n  if (!hasLowerCase(text) || !hasUpperCase(text)) return \"Password should contains minimum 1 character for both uppercase and lowercase letter\";\n  if (!hasNumber(text)) return \"Password should contains minimum 1 digit of numeric value\";\n  if (!hasSpecialChar(text)) return \"Password should contains minimum 1 special character\";\n  return \"\";\n};\nconst validateEmail = email => {\n  return EmailValidator.validate(email);\n};\nexport default {\n  validateEmail,\n  validatePassword\n};","map":{"version":3,"names":["EmailValidator","hasSpecialChar","str","test","hasNumber","hasLowerCase","toUpperCase","hasUpperCase","toLowerCase","validatePassword","text","length","validateEmail","email","validate"],"sources":["/Users/wzj/前端project/tasteofyork/src/pages/Login/validation.jsx"],"sourcesContent":["import * as EmailValidator from 'email-validator'\n\nconst hasSpecialChar=(str)=>{\n    return /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(str);\n}\nconst hasNumber = (str) => {\n    return /\\d/.test(str);\n}\nconst hasLowerCase = (str) => {\n    return str.toUpperCase() !== str;\n}\n\nconst hasUpperCase = (str) => {\n    return str.toLowerCase() !== str;\n}\n\nconst validatePassword =(text)=>{\n    if (text.length < 8) return \"Password should be 8 or more characters\";\n    if (!hasLowerCase(text) || !hasUpperCase(text)) return \"Password should contains minimum 1 character for both uppercase and lowercase letter\";\n    if (!hasNumber(text)) return \"Password should contains minimum 1 digit of numeric value\";\n    if (!hasSpecialChar(text)) return \"Password should contains minimum 1 special character\";\n    return \"\";\n}\n\nconst validateEmail=(email)=>{\n    return EmailValidator.validate(email);\n}\n\nexport default {validateEmail, validatePassword};"],"mappings":"AAAA,OAAO,KAAKA,cAAc,MAAM,iBAAiB;AAEjD,MAAMC,cAAc,GAAEC,GAAG,IAAG;EACxB,OAAO,wCAAwC,CAACC,IAAI,CAACD,GAAG,CAAC;AAC7D,CAAC;AACD,MAAME,SAAS,GAAIF,GAAG,IAAK;EACvB,OAAO,IAAI,CAACC,IAAI,CAACD,GAAG,CAAC;AACzB,CAAC;AACD,MAAMG,YAAY,GAAIH,GAAG,IAAK;EAC1B,OAAOA,GAAG,CAACI,WAAW,EAAE,KAAKJ,GAAG;AACpC,CAAC;AAED,MAAMK,YAAY,GAAIL,GAAG,IAAK;EAC1B,OAAOA,GAAG,CAACM,WAAW,EAAE,KAAKN,GAAG;AACpC,CAAC;AAED,MAAMO,gBAAgB,GAAGC,IAAI,IAAG;EAC5B,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE,OAAO,yCAAyC;EACrE,IAAI,CAACN,YAAY,CAACK,IAAI,CAAC,IAAI,CAACH,YAAY,CAACG,IAAI,CAAC,EAAE,OAAO,sFAAsF;EAC7I,IAAI,CAACN,SAAS,CAACM,IAAI,CAAC,EAAE,OAAO,2DAA2D;EACxF,IAAI,CAACT,cAAc,CAACS,IAAI,CAAC,EAAE,OAAO,sDAAsD;EACxF,OAAO,EAAE;AACb,CAAC;AAED,MAAME,aAAa,GAAEC,KAAK,IAAG;EACzB,OAAOb,cAAc,CAACc,QAAQ,CAACD,KAAK,CAAC;AACzC,CAAC;AAED,eAAe;EAACD,aAAa;EAAEH;AAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}